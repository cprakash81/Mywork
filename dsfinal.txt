#1
char Aclass(3,32)
Adymosim
1.4
Final state generated by Dymosim


#    Experiment parameters
double experiment(7,1)
     100                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
     200                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-004   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(36,30)
dCMachine.ground.p.v
dCMachine.ground.p.i
dCMachine.resistor.R
dCMachine.resistor.T_ref
dCMachine.resistor.alpha
dCMachine.resistor.v
dCMachine.resistor.n.v
dCMachine.resistor.useHeatPort
dCMachine.resistor.T
dCMachine.resistor.LossPower
dCMachine.resistor.R_actual
dCMachine.inductor.v
dCMachine.inductor.i
dCMachine.inductor.der(i)
dCMachine.inductor.n.v
dCMachine.inductor.L
dCMachine.emf.useSupport
dCMachine.emf.k
dCMachine.emf.phi
dCMachine.emf.n.v
dCMachine.emf.flange.tau
dCMachine.emf.fixed.phi0
dCMachine.inertia.flange_b.tau
dCMachine.inertia.J
dCMachine.inertia.stateSelect
dCMachine.inertia.phi
dCMachine.inertia.der(phi)
dCMachine.inertia.w
dCMachine.inertia.der(w)
dCMachine.flange_b1.tau
dCMachine.p.v
dCMachine.n.v
signalVoltage.n.v
step.height
step.offset
step.startTime

double initialValue(36,6)
 -2       0                  0       0                  6   260   # dCMachine.ground.p.v
 -2       0                  0       0                  6   388   # dCMachine.ground.p.i
 -1 5.0000000000000000E-001  0       0                  1   280   # dCMachine.resistor.R
 -1 3.0014999999999998E+002  0 1.0000000000000000E+100  1   280   # dCMachine.resistor.T_ref
 -1       0                  0       0                  1   280   # dCMachine.resistor.alpha
 -2 -3.1342609778184094E-022  0       0                  6   256   # dCMachine.resistor.v
 -2       1                  0       0                  6   260   # dCMachine.resistor.n.v
 -2       0                  0       0                  6   769   # dCMachine.resistor.useHeatPort
 -2 3.0014999999999998E+002  0 1.0000000000000000E+100  6   256   # dCMachine.resistor.T
 -2 1.9647183754150424E-043  0       0                  6   256   # dCMachine.resistor.LossPower
 -2 5.0000000000000000E-001  0       0                  6   256   # dCMachine.resistor.R_actual
 -2       0                  0       0                  6   256   # dCMachine.inductor.v
 -2 -6.2685219556368188E-022  0       0                  2   280   # dCMachine.inductor.i
 -2       0                  0       0                  3   256   # dCMachine.inductor.der(i)
 -2       1                  0       0                  6   260   # dCMachine.inductor.n.v
 -1 5.0000000000000003E-002  0       0                  1   280   # dCMachine.inductor.L
 -2       0                  0       0                  6   769   # dCMachine.emf.useSupport
 -1       1                  0       0                  1   280   # dCMachine.emf.k
 -2 9.9999499999999557E+001  0       0                  6   256   # dCMachine.emf.phi
 -2       0                  0       0                  6   260   # dCMachine.emf.n.v
 -2 6.2685219556368188E-022  0       0                  6   388   # dCMachine.emf.flange.tau
 -1       0                  0       0                  1  1304   # dCMachine.emf.fixed.phi0
 -2       0                  0       0                  6   388   # dCMachine.inertia.flange_b.tau
 -1 1.0000000000000000E-003  0 1.0000000000000000E+100  1   280   # dCMachine.inertia.J
 -2       3                  1       5                  6   770   # dCMachine.inertia.stateSelect
 -2 9.9999499999999557E+001  0       0                  2   280   # dCMachine.inertia.phi
 -2       1                  0       0                  3   256   # dCMachine.inertia.der(phi)
 -2       1                  0       0                  2   280   # dCMachine.inertia.w
 -2 -6.2685219556368191E-019  0       0                  3   256   # dCMachine.inertia.der(w)
 -2       0                  0       0                  6   388   # dCMachine.flange_b1.tau
 -2       1                  0       0                  6   324   # dCMachine.p.v
 -2       0                  0       0                  6   260   # dCMachine.n.v
 -2       0                  0       0                  6   260   # signalVoltage.n.v
 -1       1                  0       0                  1   280   # step.height
 -1       0                  0       0                  1   280   # step.offset
 -1       0                  0       0                  1   280   # step.startTime


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(36,90)
Potential at the pin [V]
Current flowing into the pin [A]
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop between the two pins (= p.v - n.v) [V]
Potential at the pin [V]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Voltage drop between the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
der(Current flowing from pin p to pin n) [A/s]
Potential at the pin [V]
Inductance [H]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Transformation coefficient [N.m/A]
Angle of shaft flange with respect to support (= flange.phi - support.phi) [rad|deg]
Potential at the pin [V]
Cut torque in the flange [N.m]
Fixed offset angle of housing [rad|deg]
Cut torque in the flange [N.m]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
der(Absolute rotation angle of component) [rad/s]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
Cut torque in the flange [N.m]
Potential at the pin [V]
Potential at the pin [V]
Potential at the pin [V]
Height of step
Offset of output signal y
Output y = offset for time < startTime [s]

